// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newResourceVGPU(db *gorm.DB, opts ...gen.DOOption) resourceVGPU {
	_resourceVGPU := resourceVGPU{}

	_resourceVGPU.resourceVGPUDo.UseDB(db, opts...)
	_resourceVGPU.resourceVGPUDo.UseModel(&model.ResourceVGPU{})

	tableName := _resourceVGPU.resourceVGPUDo.TableName()
	_resourceVGPU.ALL = field.NewAsterisk(tableName)
	_resourceVGPU.ID = field.NewUint(tableName, "id")
	_resourceVGPU.CreatedAt = field.NewTime(tableName, "created_at")
	_resourceVGPU.UpdatedAt = field.NewTime(tableName, "updated_at")
	_resourceVGPU.DeletedAt = field.NewField(tableName, "deleted_at")
	_resourceVGPU.GPUResourceID = field.NewUint(tableName, "gpu_resource_id")
	_resourceVGPU.VGPUResourceID = field.NewUint(tableName, "vgpu_resource_id")
	_resourceVGPU.Min = field.NewInt(tableName, "min")
	_resourceVGPU.Max = field.NewInt(tableName, "max")
	_resourceVGPU.Description = field.NewString(tableName, "description")
	_resourceVGPU.GPUResource = resourceVGPUBelongsToGPUResource{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("GPUResource", "model.Resource"),
		Networks: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("GPUResource.Networks", "model.Resource"),
		},
	}

	_resourceVGPU.VGPUResource = resourceVGPUBelongsToVGPUResource{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("VGPUResource", "model.Resource"),
	}

	_resourceVGPU.fillFieldMap()

	return _resourceVGPU
}

type resourceVGPU struct {
	resourceVGPUDo resourceVGPUDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	GPUResourceID  field.Uint   // GPU资源ID
	VGPUResourceID field.Uint   // VGPU资源ID
	Min            field.Int    // 最小值
	Max            field.Int    // 最大值
	Description    field.String // 备注说明(用于区分是Cores还是Mem)
	GPUResource    resourceVGPUBelongsToGPUResource

	VGPUResource resourceVGPUBelongsToVGPUResource

	fieldMap map[string]field.Expr
}

func (r resourceVGPU) Table(newTableName string) *resourceVGPU {
	r.resourceVGPUDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resourceVGPU) As(alias string) *resourceVGPU {
	r.resourceVGPUDo.DO = *(r.resourceVGPUDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resourceVGPU) updateTableName(table string) *resourceVGPU {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.GPUResourceID = field.NewUint(table, "gpu_resource_id")
	r.VGPUResourceID = field.NewUint(table, "vgpu_resource_id")
	r.Min = field.NewInt(table, "min")
	r.Max = field.NewInt(table, "max")
	r.Description = field.NewString(table, "description")

	r.fillFieldMap()

	return r
}

func (r *resourceVGPU) WithContext(ctx context.Context) IResourceVGPUDo {
	return r.resourceVGPUDo.WithContext(ctx)
}

func (r resourceVGPU) TableName() string { return r.resourceVGPUDo.TableName() }

func (r resourceVGPU) Alias() string { return r.resourceVGPUDo.Alias() }

func (r resourceVGPU) Columns(cols ...field.Expr) gen.Columns {
	return r.resourceVGPUDo.Columns(cols...)
}

func (r *resourceVGPU) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resourceVGPU) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["gpu_resource_id"] = r.GPUResourceID
	r.fieldMap["vgpu_resource_id"] = r.VGPUResourceID
	r.fieldMap["min"] = r.Min
	r.fieldMap["max"] = r.Max
	r.fieldMap["description"] = r.Description

}

func (r resourceVGPU) clone(db *gorm.DB) resourceVGPU {
	r.resourceVGPUDo.ReplaceConnPool(db.Statement.ConnPool)
	r.GPUResource.db = db.Session(&gorm.Session{Initialized: true})
	r.GPUResource.db.Statement.ConnPool = db.Statement.ConnPool
	r.VGPUResource.db = db.Session(&gorm.Session{Initialized: true})
	r.VGPUResource.db.Statement.ConnPool = db.Statement.ConnPool
	return r
}

func (r resourceVGPU) replaceDB(db *gorm.DB) resourceVGPU {
	r.resourceVGPUDo.ReplaceDB(db)
	r.GPUResource.db = db.Session(&gorm.Session{})
	r.VGPUResource.db = db.Session(&gorm.Session{})
	return r
}

type resourceVGPUBelongsToGPUResource struct {
	db *gorm.DB

	field.RelationField

	Networks struct {
		field.RelationField
	}
}

func (a resourceVGPUBelongsToGPUResource) Where(conds ...field.Expr) *resourceVGPUBelongsToGPUResource {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a resourceVGPUBelongsToGPUResource) WithContext(ctx context.Context) *resourceVGPUBelongsToGPUResource {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a resourceVGPUBelongsToGPUResource) Session(session *gorm.Session) *resourceVGPUBelongsToGPUResource {
	a.db = a.db.Session(session)
	return &a
}

func (a resourceVGPUBelongsToGPUResource) Model(m *model.ResourceVGPU) *resourceVGPUBelongsToGPUResourceTx {
	return &resourceVGPUBelongsToGPUResourceTx{a.db.Model(m).Association(a.Name())}
}

func (a resourceVGPUBelongsToGPUResource) Unscoped() *resourceVGPUBelongsToGPUResource {
	a.db = a.db.Unscoped()
	return &a
}

type resourceVGPUBelongsToGPUResourceTx struct{ tx *gorm.Association }

func (a resourceVGPUBelongsToGPUResourceTx) Find() (result *model.Resource, err error) {
	return result, a.tx.Find(&result)
}

func (a resourceVGPUBelongsToGPUResourceTx) Append(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a resourceVGPUBelongsToGPUResourceTx) Replace(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a resourceVGPUBelongsToGPUResourceTx) Delete(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a resourceVGPUBelongsToGPUResourceTx) Clear() error {
	return a.tx.Clear()
}

func (a resourceVGPUBelongsToGPUResourceTx) Count() int64 {
	return a.tx.Count()
}

func (a resourceVGPUBelongsToGPUResourceTx) Unscoped() *resourceVGPUBelongsToGPUResourceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type resourceVGPUBelongsToVGPUResource struct {
	db *gorm.DB

	field.RelationField
}

func (a resourceVGPUBelongsToVGPUResource) Where(conds ...field.Expr) *resourceVGPUBelongsToVGPUResource {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a resourceVGPUBelongsToVGPUResource) WithContext(ctx context.Context) *resourceVGPUBelongsToVGPUResource {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a resourceVGPUBelongsToVGPUResource) Session(session *gorm.Session) *resourceVGPUBelongsToVGPUResource {
	a.db = a.db.Session(session)
	return &a
}

func (a resourceVGPUBelongsToVGPUResource) Model(m *model.ResourceVGPU) *resourceVGPUBelongsToVGPUResourceTx {
	return &resourceVGPUBelongsToVGPUResourceTx{a.db.Model(m).Association(a.Name())}
}

func (a resourceVGPUBelongsToVGPUResource) Unscoped() *resourceVGPUBelongsToVGPUResource {
	a.db = a.db.Unscoped()
	return &a
}

type resourceVGPUBelongsToVGPUResourceTx struct{ tx *gorm.Association }

func (a resourceVGPUBelongsToVGPUResourceTx) Find() (result *model.Resource, err error) {
	return result, a.tx.Find(&result)
}

func (a resourceVGPUBelongsToVGPUResourceTx) Append(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a resourceVGPUBelongsToVGPUResourceTx) Replace(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a resourceVGPUBelongsToVGPUResourceTx) Delete(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a resourceVGPUBelongsToVGPUResourceTx) Clear() error {
	return a.tx.Clear()
}

func (a resourceVGPUBelongsToVGPUResourceTx) Count() int64 {
	return a.tx.Count()
}

func (a resourceVGPUBelongsToVGPUResourceTx) Unscoped() *resourceVGPUBelongsToVGPUResourceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type resourceVGPUDo struct{ gen.DO }

type IResourceVGPUDo interface {
	gen.SubQuery
	Debug() IResourceVGPUDo
	WithContext(ctx context.Context) IResourceVGPUDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResourceVGPUDo
	WriteDB() IResourceVGPUDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResourceVGPUDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResourceVGPUDo
	Not(conds ...gen.Condition) IResourceVGPUDo
	Or(conds ...gen.Condition) IResourceVGPUDo
	Select(conds ...field.Expr) IResourceVGPUDo
	Where(conds ...gen.Condition) IResourceVGPUDo
	Order(conds ...field.Expr) IResourceVGPUDo
	Distinct(cols ...field.Expr) IResourceVGPUDo
	Omit(cols ...field.Expr) IResourceVGPUDo
	Join(table schema.Tabler, on ...field.Expr) IResourceVGPUDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResourceVGPUDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResourceVGPUDo
	Group(cols ...field.Expr) IResourceVGPUDo
	Having(conds ...gen.Condition) IResourceVGPUDo
	Limit(limit int) IResourceVGPUDo
	Offset(offset int) IResourceVGPUDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceVGPUDo
	Unscoped() IResourceVGPUDo
	Create(values ...*model.ResourceVGPU) error
	CreateInBatches(values []*model.ResourceVGPU, batchSize int) error
	Save(values ...*model.ResourceVGPU) error
	First() (*model.ResourceVGPU, error)
	Take() (*model.ResourceVGPU, error)
	Last() (*model.ResourceVGPU, error)
	Find() ([]*model.ResourceVGPU, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResourceVGPU, err error)
	FindInBatches(result *[]*model.ResourceVGPU, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ResourceVGPU) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResourceVGPUDo
	Assign(attrs ...field.AssignExpr) IResourceVGPUDo
	Joins(fields ...field.RelationField) IResourceVGPUDo
	Preload(fields ...field.RelationField) IResourceVGPUDo
	FirstOrInit() (*model.ResourceVGPU, error)
	FirstOrCreate() (*model.ResourceVGPU, error)
	FindByPage(offset int, limit int) (result []*model.ResourceVGPU, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResourceVGPUDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resourceVGPUDo) Debug() IResourceVGPUDo {
	return r.withDO(r.DO.Debug())
}

func (r resourceVGPUDo) WithContext(ctx context.Context) IResourceVGPUDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourceVGPUDo) ReadDB() IResourceVGPUDo {
	return r.Clauses(dbresolver.Read)
}

func (r resourceVGPUDo) WriteDB() IResourceVGPUDo {
	return r.Clauses(dbresolver.Write)
}

func (r resourceVGPUDo) Session(config *gorm.Session) IResourceVGPUDo {
	return r.withDO(r.DO.Session(config))
}

func (r resourceVGPUDo) Clauses(conds ...clause.Expression) IResourceVGPUDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourceVGPUDo) Returning(value interface{}, columns ...string) IResourceVGPUDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourceVGPUDo) Not(conds ...gen.Condition) IResourceVGPUDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourceVGPUDo) Or(conds ...gen.Condition) IResourceVGPUDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourceVGPUDo) Select(conds ...field.Expr) IResourceVGPUDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourceVGPUDo) Where(conds ...gen.Condition) IResourceVGPUDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourceVGPUDo) Order(conds ...field.Expr) IResourceVGPUDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourceVGPUDo) Distinct(cols ...field.Expr) IResourceVGPUDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourceVGPUDo) Omit(cols ...field.Expr) IResourceVGPUDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourceVGPUDo) Join(table schema.Tabler, on ...field.Expr) IResourceVGPUDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourceVGPUDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResourceVGPUDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourceVGPUDo) RightJoin(table schema.Tabler, on ...field.Expr) IResourceVGPUDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourceVGPUDo) Group(cols ...field.Expr) IResourceVGPUDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourceVGPUDo) Having(conds ...gen.Condition) IResourceVGPUDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourceVGPUDo) Limit(limit int) IResourceVGPUDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourceVGPUDo) Offset(offset int) IResourceVGPUDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourceVGPUDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceVGPUDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourceVGPUDo) Unscoped() IResourceVGPUDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourceVGPUDo) Create(values ...*model.ResourceVGPU) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourceVGPUDo) CreateInBatches(values []*model.ResourceVGPU, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourceVGPUDo) Save(values ...*model.ResourceVGPU) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourceVGPUDo) First() (*model.ResourceVGPU, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceVGPU), nil
	}
}

func (r resourceVGPUDo) Take() (*model.ResourceVGPU, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceVGPU), nil
	}
}

func (r resourceVGPUDo) Last() (*model.ResourceVGPU, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceVGPU), nil
	}
}

func (r resourceVGPUDo) Find() ([]*model.ResourceVGPU, error) {
	result, err := r.DO.Find()
	return result.([]*model.ResourceVGPU), err
}

func (r resourceVGPUDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResourceVGPU, err error) {
	buf := make([]*model.ResourceVGPU, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourceVGPUDo) FindInBatches(result *[]*model.ResourceVGPU, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourceVGPUDo) Attrs(attrs ...field.AssignExpr) IResourceVGPUDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourceVGPUDo) Assign(attrs ...field.AssignExpr) IResourceVGPUDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourceVGPUDo) Joins(fields ...field.RelationField) IResourceVGPUDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resourceVGPUDo) Preload(fields ...field.RelationField) IResourceVGPUDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resourceVGPUDo) FirstOrInit() (*model.ResourceVGPU, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceVGPU), nil
	}
}

func (r resourceVGPUDo) FirstOrCreate() (*model.ResourceVGPU, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceVGPU), nil
	}
}

func (r resourceVGPUDo) FindByPage(offset int, limit int) (result []*model.ResourceVGPU, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourceVGPUDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resourceVGPUDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resourceVGPUDo) Delete(models ...*model.ResourceVGPU) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resourceVGPUDo) withDO(do gen.Dao) *resourceVGPUDo {
	r.DO = *do.(*gen.DO)
	return r
}
