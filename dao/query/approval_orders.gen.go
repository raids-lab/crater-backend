// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newApprovalOrder(db *gorm.DB, opts ...gen.DOOption) approvalOrder {
	_approvalOrder := approvalOrder{}

	_approvalOrder.approvalOrderDo.UseDB(db, opts...)
	_approvalOrder.approvalOrderDo.UseModel(&model.ApprovalOrder{})

	tableName := _approvalOrder.approvalOrderDo.TableName()
	_approvalOrder.ALL = field.NewAsterisk(tableName)
	_approvalOrder.ID = field.NewUint(tableName, "id")
	_approvalOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_approvalOrder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_approvalOrder.DeletedAt = field.NewField(tableName, "deleted_at")
	_approvalOrder.Name = field.NewString(tableName, "name")
	_approvalOrder.Type = field.NewString(tableName, "type")
	_approvalOrder.Status = field.NewString(tableName, "status")
	_approvalOrder.Content = field.NewField(tableName, "content")
	_approvalOrder.ReviewNotes = field.NewString(tableName, "review_notes")
	_approvalOrder.CreatorID = field.NewUint(tableName, "creator_id")
	_approvalOrder.ReviewerID = field.NewUint(tableName, "reviewer_id")
	_approvalOrder.Creator = approvalOrderBelongsToCreator{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Creator", "model.User"),
		UserAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Creator.UserAccounts", "model.UserAccount"),
		},
		UserDatasets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Creator.UserDatasets", "model.UserDataset"),
		},
	}

	_approvalOrder.Reviewer = approvalOrderBelongsToReviewer{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Reviewer", "model.User"),
	}

	_approvalOrder.fillFieldMap()

	return _approvalOrder
}

type approvalOrder struct {
	approvalOrderDo approvalOrderDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String // 审批订单名称
	Type        field.String // 审批订单类型
	Status      field.String // 审批订单状态
	Content     field.Field  // 审批订单内容
	ReviewNotes field.String // 审批备注
	CreatorID   field.Uint   // 创建者ID
	ReviewerID  field.Uint   // 审批者ID
	Creator     approvalOrderBelongsToCreator

	Reviewer approvalOrderBelongsToReviewer

	fieldMap map[string]field.Expr
}

func (a approvalOrder) Table(newTableName string) *approvalOrder {
	a.approvalOrderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a approvalOrder) As(alias string) *approvalOrder {
	a.approvalOrderDo.DO = *(a.approvalOrderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *approvalOrder) updateTableName(table string) *approvalOrder {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewString(table, "type")
	a.Status = field.NewString(table, "status")
	a.Content = field.NewField(table, "content")
	a.ReviewNotes = field.NewString(table, "review_notes")
	a.CreatorID = field.NewUint(table, "creator_id")
	a.ReviewerID = field.NewUint(table, "reviewer_id")

	a.fillFieldMap()

	return a
}

func (a *approvalOrder) WithContext(ctx context.Context) IApprovalOrderDo {
	return a.approvalOrderDo.WithContext(ctx)
}

func (a approvalOrder) TableName() string { return a.approvalOrderDo.TableName() }

func (a approvalOrder) Alias() string { return a.approvalOrderDo.Alias() }

func (a approvalOrder) Columns(cols ...field.Expr) gen.Columns {
	return a.approvalOrderDo.Columns(cols...)
}

func (a *approvalOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *approvalOrder) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["status"] = a.Status
	a.fieldMap["content"] = a.Content
	a.fieldMap["review_notes"] = a.ReviewNotes
	a.fieldMap["creator_id"] = a.CreatorID
	a.fieldMap["reviewer_id"] = a.ReviewerID

}

func (a approvalOrder) clone(db *gorm.DB) approvalOrder {
	a.approvalOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	a.Creator.db = db.Session(&gorm.Session{Initialized: true})
	a.Creator.db.Statement.ConnPool = db.Statement.ConnPool
	a.Reviewer.db = db.Session(&gorm.Session{Initialized: true})
	a.Reviewer.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a approvalOrder) replaceDB(db *gorm.DB) approvalOrder {
	a.approvalOrderDo.ReplaceDB(db)
	a.Creator.db = db.Session(&gorm.Session{})
	a.Reviewer.db = db.Session(&gorm.Session{})
	return a
}

type approvalOrderBelongsToCreator struct {
	db *gorm.DB

	field.RelationField

	UserAccounts struct {
		field.RelationField
	}
	UserDatasets struct {
		field.RelationField
	}
}

func (a approvalOrderBelongsToCreator) Where(conds ...field.Expr) *approvalOrderBelongsToCreator {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a approvalOrderBelongsToCreator) WithContext(ctx context.Context) *approvalOrderBelongsToCreator {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a approvalOrderBelongsToCreator) Session(session *gorm.Session) *approvalOrderBelongsToCreator {
	a.db = a.db.Session(session)
	return &a
}

func (a approvalOrderBelongsToCreator) Model(m *model.ApprovalOrder) *approvalOrderBelongsToCreatorTx {
	return &approvalOrderBelongsToCreatorTx{a.db.Model(m).Association(a.Name())}
}

func (a approvalOrderBelongsToCreator) Unscoped() *approvalOrderBelongsToCreator {
	a.db = a.db.Unscoped()
	return &a
}

type approvalOrderBelongsToCreatorTx struct{ tx *gorm.Association }

func (a approvalOrderBelongsToCreatorTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a approvalOrderBelongsToCreatorTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a approvalOrderBelongsToCreatorTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a approvalOrderBelongsToCreatorTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a approvalOrderBelongsToCreatorTx) Clear() error {
	return a.tx.Clear()
}

func (a approvalOrderBelongsToCreatorTx) Count() int64 {
	return a.tx.Count()
}

func (a approvalOrderBelongsToCreatorTx) Unscoped() *approvalOrderBelongsToCreatorTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type approvalOrderBelongsToReviewer struct {
	db *gorm.DB

	field.RelationField
}

func (a approvalOrderBelongsToReviewer) Where(conds ...field.Expr) *approvalOrderBelongsToReviewer {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a approvalOrderBelongsToReviewer) WithContext(ctx context.Context) *approvalOrderBelongsToReviewer {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a approvalOrderBelongsToReviewer) Session(session *gorm.Session) *approvalOrderBelongsToReviewer {
	a.db = a.db.Session(session)
	return &a
}

func (a approvalOrderBelongsToReviewer) Model(m *model.ApprovalOrder) *approvalOrderBelongsToReviewerTx {
	return &approvalOrderBelongsToReviewerTx{a.db.Model(m).Association(a.Name())}
}

func (a approvalOrderBelongsToReviewer) Unscoped() *approvalOrderBelongsToReviewer {
	a.db = a.db.Unscoped()
	return &a
}

type approvalOrderBelongsToReviewerTx struct{ tx *gorm.Association }

func (a approvalOrderBelongsToReviewerTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a approvalOrderBelongsToReviewerTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a approvalOrderBelongsToReviewerTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a approvalOrderBelongsToReviewerTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a approvalOrderBelongsToReviewerTx) Clear() error {
	return a.tx.Clear()
}

func (a approvalOrderBelongsToReviewerTx) Count() int64 {
	return a.tx.Count()
}

func (a approvalOrderBelongsToReviewerTx) Unscoped() *approvalOrderBelongsToReviewerTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type approvalOrderDo struct{ gen.DO }

type IApprovalOrderDo interface {
	gen.SubQuery
	Debug() IApprovalOrderDo
	WithContext(ctx context.Context) IApprovalOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IApprovalOrderDo
	WriteDB() IApprovalOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IApprovalOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApprovalOrderDo
	Not(conds ...gen.Condition) IApprovalOrderDo
	Or(conds ...gen.Condition) IApprovalOrderDo
	Select(conds ...field.Expr) IApprovalOrderDo
	Where(conds ...gen.Condition) IApprovalOrderDo
	Order(conds ...field.Expr) IApprovalOrderDo
	Distinct(cols ...field.Expr) IApprovalOrderDo
	Omit(cols ...field.Expr) IApprovalOrderDo
	Join(table schema.Tabler, on ...field.Expr) IApprovalOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApprovalOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApprovalOrderDo
	Group(cols ...field.Expr) IApprovalOrderDo
	Having(conds ...gen.Condition) IApprovalOrderDo
	Limit(limit int) IApprovalOrderDo
	Offset(offset int) IApprovalOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApprovalOrderDo
	Unscoped() IApprovalOrderDo
	Create(values ...*model.ApprovalOrder) error
	CreateInBatches(values []*model.ApprovalOrder, batchSize int) error
	Save(values ...*model.ApprovalOrder) error
	First() (*model.ApprovalOrder, error)
	Take() (*model.ApprovalOrder, error)
	Last() (*model.ApprovalOrder, error)
	Find() ([]*model.ApprovalOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApprovalOrder, err error)
	FindInBatches(result *[]*model.ApprovalOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ApprovalOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApprovalOrderDo
	Assign(attrs ...field.AssignExpr) IApprovalOrderDo
	Joins(fields ...field.RelationField) IApprovalOrderDo
	Preload(fields ...field.RelationField) IApprovalOrderDo
	FirstOrInit() (*model.ApprovalOrder, error)
	FirstOrCreate() (*model.ApprovalOrder, error)
	FindByPage(offset int, limit int) (result []*model.ApprovalOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApprovalOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a approvalOrderDo) Debug() IApprovalOrderDo {
	return a.withDO(a.DO.Debug())
}

func (a approvalOrderDo) WithContext(ctx context.Context) IApprovalOrderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a approvalOrderDo) ReadDB() IApprovalOrderDo {
	return a.Clauses(dbresolver.Read)
}

func (a approvalOrderDo) WriteDB() IApprovalOrderDo {
	return a.Clauses(dbresolver.Write)
}

func (a approvalOrderDo) Session(config *gorm.Session) IApprovalOrderDo {
	return a.withDO(a.DO.Session(config))
}

func (a approvalOrderDo) Clauses(conds ...clause.Expression) IApprovalOrderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a approvalOrderDo) Returning(value interface{}, columns ...string) IApprovalOrderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a approvalOrderDo) Not(conds ...gen.Condition) IApprovalOrderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a approvalOrderDo) Or(conds ...gen.Condition) IApprovalOrderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a approvalOrderDo) Select(conds ...field.Expr) IApprovalOrderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a approvalOrderDo) Where(conds ...gen.Condition) IApprovalOrderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a approvalOrderDo) Order(conds ...field.Expr) IApprovalOrderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a approvalOrderDo) Distinct(cols ...field.Expr) IApprovalOrderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a approvalOrderDo) Omit(cols ...field.Expr) IApprovalOrderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a approvalOrderDo) Join(table schema.Tabler, on ...field.Expr) IApprovalOrderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a approvalOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApprovalOrderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a approvalOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IApprovalOrderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a approvalOrderDo) Group(cols ...field.Expr) IApprovalOrderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a approvalOrderDo) Having(conds ...gen.Condition) IApprovalOrderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a approvalOrderDo) Limit(limit int) IApprovalOrderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a approvalOrderDo) Offset(offset int) IApprovalOrderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a approvalOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApprovalOrderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a approvalOrderDo) Unscoped() IApprovalOrderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a approvalOrderDo) Create(values ...*model.ApprovalOrder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a approvalOrderDo) CreateInBatches(values []*model.ApprovalOrder, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a approvalOrderDo) Save(values ...*model.ApprovalOrder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a approvalOrderDo) First() (*model.ApprovalOrder, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApprovalOrder), nil
	}
}

func (a approvalOrderDo) Take() (*model.ApprovalOrder, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApprovalOrder), nil
	}
}

func (a approvalOrderDo) Last() (*model.ApprovalOrder, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApprovalOrder), nil
	}
}

func (a approvalOrderDo) Find() ([]*model.ApprovalOrder, error) {
	result, err := a.DO.Find()
	return result.([]*model.ApprovalOrder), err
}

func (a approvalOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApprovalOrder, err error) {
	buf := make([]*model.ApprovalOrder, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a approvalOrderDo) FindInBatches(result *[]*model.ApprovalOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a approvalOrderDo) Attrs(attrs ...field.AssignExpr) IApprovalOrderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a approvalOrderDo) Assign(attrs ...field.AssignExpr) IApprovalOrderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a approvalOrderDo) Joins(fields ...field.RelationField) IApprovalOrderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a approvalOrderDo) Preload(fields ...field.RelationField) IApprovalOrderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a approvalOrderDo) FirstOrInit() (*model.ApprovalOrder, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApprovalOrder), nil
	}
}

func (a approvalOrderDo) FirstOrCreate() (*model.ApprovalOrder, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApprovalOrder), nil
	}
}

func (a approvalOrderDo) FindByPage(offset int, limit int) (result []*model.ApprovalOrder, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a approvalOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a approvalOrderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a approvalOrderDo) Delete(models ...*model.ApprovalOrder) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *approvalOrderDo) withDO(do gen.Dao) *approvalOrderDo {
	a.DO = *do.(*gen.DO)
	return a
}
