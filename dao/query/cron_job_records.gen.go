// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newCronJobRecord(db *gorm.DB, opts ...gen.DOOption) cronJobRecord {
	_cronJobRecord := cronJobRecord{}

	_cronJobRecord.cronJobRecordDo.UseDB(db, opts...)
	_cronJobRecord.cronJobRecordDo.UseModel(&model.CronJobRecord{})

	tableName := _cronJobRecord.cronJobRecordDo.TableName()
	_cronJobRecord.ALL = field.NewAsterisk(tableName)
	_cronJobRecord.ID = field.NewUint(tableName, "id")
	_cronJobRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_cronJobRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cronJobRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_cronJobRecord.Name = field.NewString(tableName, "name")
	_cronJobRecord.ExecuteTime = field.NewTime(tableName, "execute_time")
	_cronJobRecord.Status = field.NewString(tableName, "status")
	_cronJobRecord.Message = field.NewString(tableName, "message")
	_cronJobRecord.JobData = field.NewField(tableName, "job_data")

	_cronJobRecord.fillFieldMap()

	return _cronJobRecord
}

type cronJobRecord struct {
	cronJobRecordDo cronJobRecordDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String // Cronjob名称
	ExecuteTime field.Time   // 执行时间
	Status      field.String // 执行状态
	Message     field.String // 执行消息或错误信息
	JobData     field.Field  // 任务数据(包含提醒和删除的任务列表)

	fieldMap map[string]field.Expr
}

func (c cronJobRecord) Table(newTableName string) *cronJobRecord {
	c.cronJobRecordDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cronJobRecord) As(alias string) *cronJobRecord {
	c.cronJobRecordDo.DO = *(c.cronJobRecordDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cronJobRecord) updateTableName(table string) *cronJobRecord {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Name = field.NewString(table, "name")
	c.ExecuteTime = field.NewTime(table, "execute_time")
	c.Status = field.NewString(table, "status")
	c.Message = field.NewString(table, "message")
	c.JobData = field.NewField(table, "job_data")

	c.fillFieldMap()

	return c
}

func (c *cronJobRecord) WithContext(ctx context.Context) ICronJobRecordDo {
	return c.cronJobRecordDo.WithContext(ctx)
}

func (c cronJobRecord) TableName() string { return c.cronJobRecordDo.TableName() }

func (c cronJobRecord) Alias() string { return c.cronJobRecordDo.Alias() }

func (c cronJobRecord) Columns(cols ...field.Expr) gen.Columns {
	return c.cronJobRecordDo.Columns(cols...)
}

func (c *cronJobRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cronJobRecord) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["execute_time"] = c.ExecuteTime
	c.fieldMap["status"] = c.Status
	c.fieldMap["message"] = c.Message
	c.fieldMap["job_data"] = c.JobData
}

func (c cronJobRecord) clone(db *gorm.DB) cronJobRecord {
	c.cronJobRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cronJobRecord) replaceDB(db *gorm.DB) cronJobRecord {
	c.cronJobRecordDo.ReplaceDB(db)
	return c
}

type cronJobRecordDo struct{ gen.DO }

type ICronJobRecordDo interface {
	gen.SubQuery
	Debug() ICronJobRecordDo
	WithContext(ctx context.Context) ICronJobRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICronJobRecordDo
	WriteDB() ICronJobRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICronJobRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICronJobRecordDo
	Not(conds ...gen.Condition) ICronJobRecordDo
	Or(conds ...gen.Condition) ICronJobRecordDo
	Select(conds ...field.Expr) ICronJobRecordDo
	Where(conds ...gen.Condition) ICronJobRecordDo
	Order(conds ...field.Expr) ICronJobRecordDo
	Distinct(cols ...field.Expr) ICronJobRecordDo
	Omit(cols ...field.Expr) ICronJobRecordDo
	Join(table schema.Tabler, on ...field.Expr) ICronJobRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICronJobRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICronJobRecordDo
	Group(cols ...field.Expr) ICronJobRecordDo
	Having(conds ...gen.Condition) ICronJobRecordDo
	Limit(limit int) ICronJobRecordDo
	Offset(offset int) ICronJobRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICronJobRecordDo
	Unscoped() ICronJobRecordDo
	Create(values ...*model.CronJobRecord) error
	CreateInBatches(values []*model.CronJobRecord, batchSize int) error
	Save(values ...*model.CronJobRecord) error
	First() (*model.CronJobRecord, error)
	Take() (*model.CronJobRecord, error)
	Last() (*model.CronJobRecord, error)
	Find() ([]*model.CronJobRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CronJobRecord, err error)
	FindInBatches(result *[]*model.CronJobRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CronJobRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICronJobRecordDo
	Assign(attrs ...field.AssignExpr) ICronJobRecordDo
	Joins(fields ...field.RelationField) ICronJobRecordDo
	Preload(fields ...field.RelationField) ICronJobRecordDo
	FirstOrInit() (*model.CronJobRecord, error)
	FirstOrCreate() (*model.CronJobRecord, error)
	FindByPage(offset int, limit int) (result []*model.CronJobRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICronJobRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cronJobRecordDo) Debug() ICronJobRecordDo {
	return c.withDO(c.DO.Debug())
}

func (c cronJobRecordDo) WithContext(ctx context.Context) ICronJobRecordDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cronJobRecordDo) ReadDB() ICronJobRecordDo {
	return c.Clauses(dbresolver.Read)
}

func (c cronJobRecordDo) WriteDB() ICronJobRecordDo {
	return c.Clauses(dbresolver.Write)
}

func (c cronJobRecordDo) Session(config *gorm.Session) ICronJobRecordDo {
	return c.withDO(c.DO.Session(config))
}

func (c cronJobRecordDo) Clauses(conds ...clause.Expression) ICronJobRecordDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cronJobRecordDo) Returning(value interface{}, columns ...string) ICronJobRecordDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cronJobRecordDo) Not(conds ...gen.Condition) ICronJobRecordDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cronJobRecordDo) Or(conds ...gen.Condition) ICronJobRecordDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cronJobRecordDo) Select(conds ...field.Expr) ICronJobRecordDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cronJobRecordDo) Where(conds ...gen.Condition) ICronJobRecordDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cronJobRecordDo) Order(conds ...field.Expr) ICronJobRecordDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cronJobRecordDo) Distinct(cols ...field.Expr) ICronJobRecordDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cronJobRecordDo) Omit(cols ...field.Expr) ICronJobRecordDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cronJobRecordDo) Join(table schema.Tabler, on ...field.Expr) ICronJobRecordDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cronJobRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICronJobRecordDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cronJobRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ICronJobRecordDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cronJobRecordDo) Group(cols ...field.Expr) ICronJobRecordDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cronJobRecordDo) Having(conds ...gen.Condition) ICronJobRecordDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cronJobRecordDo) Limit(limit int) ICronJobRecordDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cronJobRecordDo) Offset(offset int) ICronJobRecordDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cronJobRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICronJobRecordDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cronJobRecordDo) Unscoped() ICronJobRecordDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cronJobRecordDo) Create(values ...*model.CronJobRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cronJobRecordDo) CreateInBatches(values []*model.CronJobRecord, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cronJobRecordDo) Save(values ...*model.CronJobRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cronJobRecordDo) First() (*model.CronJobRecord, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobRecord), nil
	}
}

func (c cronJobRecordDo) Take() (*model.CronJobRecord, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobRecord), nil
	}
}

func (c cronJobRecordDo) Last() (*model.CronJobRecord, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobRecord), nil
	}
}

func (c cronJobRecordDo) Find() ([]*model.CronJobRecord, error) {
	result, err := c.DO.Find()
	return result.([]*model.CronJobRecord), err
}

func (c cronJobRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CronJobRecord, err error) {
	buf := make([]*model.CronJobRecord, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cronJobRecordDo) FindInBatches(result *[]*model.CronJobRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cronJobRecordDo) Attrs(attrs ...field.AssignExpr) ICronJobRecordDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cronJobRecordDo) Assign(attrs ...field.AssignExpr) ICronJobRecordDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cronJobRecordDo) Joins(fields ...field.RelationField) ICronJobRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cronJobRecordDo) Preload(fields ...field.RelationField) ICronJobRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cronJobRecordDo) FirstOrInit() (*model.CronJobRecord, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobRecord), nil
	}
}

func (c cronJobRecordDo) FirstOrCreate() (*model.CronJobRecord, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobRecord), nil
	}
}

func (c cronJobRecordDo) FindByPage(offset int, limit int) (result []*model.CronJobRecord, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cronJobRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cronJobRecordDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cronJobRecordDo) Delete(models ...*model.CronJobRecord) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cronJobRecordDo) withDO(do gen.Dao) *cronJobRecordDo {
	c.DO = *do.(*gen.DO)
	return c
}
