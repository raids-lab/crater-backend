// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	AITask          *aITask
	Account         *account
	AccountDataset  *accountDataset
	Alert           *alert
	ApprovalOrder   *approvalOrder
	CudaBaseImage   *cudaBaseImage
	Dataset         *dataset
	Image           *image
	ImageAccount    *imageAccount
	ImageUser       *imageUser
	Job             *job
	Jobtemplate     *jobtemplate
	Kaniko          *kaniko
	Resource        *resource
	ResourceNetwork *resourceNetwork
	ResourceVGPU    *resourceVGPU
	User            *user
	UserAccount     *userAccount
	UserDataset     *userDataset
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AITask = &Q.AITask
	Account = &Q.Account
	AccountDataset = &Q.AccountDataset
	Alert = &Q.Alert
	ApprovalOrder = &Q.ApprovalOrder
	CudaBaseImage = &Q.CudaBaseImage
	Dataset = &Q.Dataset
	Image = &Q.Image
	ImageAccount = &Q.ImageAccount
	ImageUser = &Q.ImageUser
	Job = &Q.Job
	Jobtemplate = &Q.Jobtemplate
	Kaniko = &Q.Kaniko
	Resource = &Q.Resource
	ResourceNetwork = &Q.ResourceNetwork
	ResourceVGPU = &Q.ResourceVGPU
	User = &Q.User
	UserAccount = &Q.UserAccount
	UserDataset = &Q.UserDataset
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		AITask:          newAITask(db, opts...),
		Account:         newAccount(db, opts...),
		AccountDataset:  newAccountDataset(db, opts...),
		Alert:           newAlert(db, opts...),
		ApprovalOrder:   newApprovalOrder(db, opts...),
		CudaBaseImage:   newCudaBaseImage(db, opts...),
		Dataset:         newDataset(db, opts...),
		Image:           newImage(db, opts...),
		ImageAccount:    newImageAccount(db, opts...),
		ImageUser:       newImageUser(db, opts...),
		Job:             newJob(db, opts...),
		Jobtemplate:     newJobtemplate(db, opts...),
		Kaniko:          newKaniko(db, opts...),
		Resource:        newResource(db, opts...),
		ResourceNetwork: newResourceNetwork(db, opts...),
		ResourceVGPU:    newResourceVGPU(db, opts...),
		User:            newUser(db, opts...),
		UserAccount:     newUserAccount(db, opts...),
		UserDataset:     newUserDataset(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AITask          aITask
	Account         account
	AccountDataset  accountDataset
	Alert           alert
	ApprovalOrder   approvalOrder
	CudaBaseImage   cudaBaseImage
	Dataset         dataset
	Image           image
	ImageAccount    imageAccount
	ImageUser       imageUser
	Job             job
	Jobtemplate     jobtemplate
	Kaniko          kaniko
	Resource        resource
	ResourceNetwork resourceNetwork
	ResourceVGPU    resourceVGPU
	User            user
	UserAccount     userAccount
	UserDataset     userDataset
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		AITask:          q.AITask.clone(db),
		Account:         q.Account.clone(db),
		AccountDataset:  q.AccountDataset.clone(db),
		Alert:           q.Alert.clone(db),
		ApprovalOrder:   q.ApprovalOrder.clone(db),
		CudaBaseImage:   q.CudaBaseImage.clone(db),
		Dataset:         q.Dataset.clone(db),
		Image:           q.Image.clone(db),
		ImageAccount:    q.ImageAccount.clone(db),
		ImageUser:       q.ImageUser.clone(db),
		Job:             q.Job.clone(db),
		Jobtemplate:     q.Jobtemplate.clone(db),
		Kaniko:          q.Kaniko.clone(db),
		Resource:        q.Resource.clone(db),
		ResourceNetwork: q.ResourceNetwork.clone(db),
		ResourceVGPU:    q.ResourceVGPU.clone(db),
		User:            q.User.clone(db),
		UserAccount:     q.UserAccount.clone(db),
		UserDataset:     q.UserDataset.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		AITask:          q.AITask.replaceDB(db),
		Account:         q.Account.replaceDB(db),
		AccountDataset:  q.AccountDataset.replaceDB(db),
		Alert:           q.Alert.replaceDB(db),
		ApprovalOrder:   q.ApprovalOrder.replaceDB(db),
		CudaBaseImage:   q.CudaBaseImage.replaceDB(db),
		Dataset:         q.Dataset.replaceDB(db),
		Image:           q.Image.replaceDB(db),
		ImageAccount:    q.ImageAccount.replaceDB(db),
		ImageUser:       q.ImageUser.replaceDB(db),
		Job:             q.Job.replaceDB(db),
		Jobtemplate:     q.Jobtemplate.replaceDB(db),
		Kaniko:          q.Kaniko.replaceDB(db),
		Resource:        q.Resource.replaceDB(db),
		ResourceNetwork: q.ResourceNetwork.replaceDB(db),
		ResourceVGPU:    q.ResourceVGPU.replaceDB(db),
		User:            q.User.replaceDB(db),
		UserAccount:     q.UserAccount.replaceDB(db),
		UserDataset:     q.UserDataset.replaceDB(db),
	}
}

type queryCtx struct {
	AITask          IAITaskDo
	Account         IAccountDo
	AccountDataset  IAccountDatasetDo
	Alert           IAlertDo
	ApprovalOrder   IApprovalOrderDo
	CudaBaseImage   ICudaBaseImageDo
	Dataset         IDatasetDo
	Image           IImageDo
	ImageAccount    IImageAccountDo
	ImageUser       IImageUserDo
	Job             IJobDo
	Jobtemplate     IJobtemplateDo
	Kaniko          IKanikoDo
	Resource        IResourceDo
	ResourceNetwork IResourceNetworkDo
	ResourceVGPU    IResourceVGPUDo
	User            IUserDo
	UserAccount     IUserAccountDo
	UserDataset     IUserDatasetDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AITask:          q.AITask.WithContext(ctx),
		Account:         q.Account.WithContext(ctx),
		AccountDataset:  q.AccountDataset.WithContext(ctx),
		Alert:           q.Alert.WithContext(ctx),
		ApprovalOrder:   q.ApprovalOrder.WithContext(ctx),
		CudaBaseImage:   q.CudaBaseImage.WithContext(ctx),
		Dataset:         q.Dataset.WithContext(ctx),
		Image:           q.Image.WithContext(ctx),
		ImageAccount:    q.ImageAccount.WithContext(ctx),
		ImageUser:       q.ImageUser.WithContext(ctx),
		Job:             q.Job.WithContext(ctx),
		Jobtemplate:     q.Jobtemplate.WithContext(ctx),
		Kaniko:          q.Kaniko.WithContext(ctx),
		Resource:        q.Resource.WithContext(ctx),
		ResourceNetwork: q.ResourceNetwork.WithContext(ctx),
		ResourceVGPU:    q.ResourceVGPU.WithContext(ctx),
		User:            q.User.WithContext(ctx),
		UserAccount:     q.UserAccount.WithContext(ctx),
		UserDataset:     q.UserDataset.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
