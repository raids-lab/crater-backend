// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newCudaBaseImage(db *gorm.DB, opts ...gen.DOOption) cudaBaseImage {
	_cudaBaseImage := cudaBaseImage{}

	_cudaBaseImage.cudaBaseImageDo.UseDB(db, opts...)
	_cudaBaseImage.cudaBaseImageDo.UseModel(&model.CudaBaseImage{})

	tableName := _cudaBaseImage.cudaBaseImageDo.TableName()
	_cudaBaseImage.ALL = field.NewAsterisk(tableName)
	_cudaBaseImage.ID = field.NewUint(tableName, "id")
	_cudaBaseImage.CreatedAt = field.NewTime(tableName, "created_at")
	_cudaBaseImage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cudaBaseImage.DeletedAt = field.NewField(tableName, "deleted_at")
	_cudaBaseImage.Label = field.NewString(tableName, "label")
	_cudaBaseImage.ImageLabel = field.NewString(tableName, "image_label")
	_cudaBaseImage.Value = field.NewString(tableName, "value")

	_cudaBaseImage.fillFieldMap()

	return _cudaBaseImage
}

type cudaBaseImage struct {
	cudaBaseImageDo cudaBaseImageDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	Label      field.String // image label showed in UI
	ImageLabel field.String // image label for imagelink generate
	Value      field.String // Full Cuda Image Link

	fieldMap map[string]field.Expr
}

func (c cudaBaseImage) Table(newTableName string) *cudaBaseImage {
	c.cudaBaseImageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cudaBaseImage) As(alias string) *cudaBaseImage {
	c.cudaBaseImageDo.DO = *(c.cudaBaseImageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cudaBaseImage) updateTableName(table string) *cudaBaseImage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Label = field.NewString(table, "label")
	c.ImageLabel = field.NewString(table, "image_label")
	c.Value = field.NewString(table, "value")

	c.fillFieldMap()

	return c
}

func (c *cudaBaseImage) WithContext(ctx context.Context) ICudaBaseImageDo {
	return c.cudaBaseImageDo.WithContext(ctx)
}

func (c cudaBaseImage) TableName() string { return c.cudaBaseImageDo.TableName() }

func (c cudaBaseImage) Alias() string { return c.cudaBaseImageDo.Alias() }

func (c cudaBaseImage) Columns(cols ...field.Expr) gen.Columns {
	return c.cudaBaseImageDo.Columns(cols...)
}

func (c *cudaBaseImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cudaBaseImage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["label"] = c.Label
	c.fieldMap["image_label"] = c.ImageLabel
	c.fieldMap["value"] = c.Value
}

func (c cudaBaseImage) clone(db *gorm.DB) cudaBaseImage {
	c.cudaBaseImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cudaBaseImage) replaceDB(db *gorm.DB) cudaBaseImage {
	c.cudaBaseImageDo.ReplaceDB(db)
	return c
}

type cudaBaseImageDo struct{ gen.DO }

type ICudaBaseImageDo interface {
	gen.SubQuery
	Debug() ICudaBaseImageDo
	WithContext(ctx context.Context) ICudaBaseImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICudaBaseImageDo
	WriteDB() ICudaBaseImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICudaBaseImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICudaBaseImageDo
	Not(conds ...gen.Condition) ICudaBaseImageDo
	Or(conds ...gen.Condition) ICudaBaseImageDo
	Select(conds ...field.Expr) ICudaBaseImageDo
	Where(conds ...gen.Condition) ICudaBaseImageDo
	Order(conds ...field.Expr) ICudaBaseImageDo
	Distinct(cols ...field.Expr) ICudaBaseImageDo
	Omit(cols ...field.Expr) ICudaBaseImageDo
	Join(table schema.Tabler, on ...field.Expr) ICudaBaseImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICudaBaseImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICudaBaseImageDo
	Group(cols ...field.Expr) ICudaBaseImageDo
	Having(conds ...gen.Condition) ICudaBaseImageDo
	Limit(limit int) ICudaBaseImageDo
	Offset(offset int) ICudaBaseImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICudaBaseImageDo
	Unscoped() ICudaBaseImageDo
	Create(values ...*model.CudaBaseImage) error
	CreateInBatches(values []*model.CudaBaseImage, batchSize int) error
	Save(values ...*model.CudaBaseImage) error
	First() (*model.CudaBaseImage, error)
	Take() (*model.CudaBaseImage, error)
	Last() (*model.CudaBaseImage, error)
	Find() ([]*model.CudaBaseImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CudaBaseImage, err error)
	FindInBatches(result *[]*model.CudaBaseImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CudaBaseImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICudaBaseImageDo
	Assign(attrs ...field.AssignExpr) ICudaBaseImageDo
	Joins(fields ...field.RelationField) ICudaBaseImageDo
	Preload(fields ...field.RelationField) ICudaBaseImageDo
	FirstOrInit() (*model.CudaBaseImage, error)
	FirstOrCreate() (*model.CudaBaseImage, error)
	FindByPage(offset int, limit int) (result []*model.CudaBaseImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICudaBaseImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cudaBaseImageDo) Debug() ICudaBaseImageDo {
	return c.withDO(c.DO.Debug())
}

func (c cudaBaseImageDo) WithContext(ctx context.Context) ICudaBaseImageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cudaBaseImageDo) ReadDB() ICudaBaseImageDo {
	return c.Clauses(dbresolver.Read)
}

func (c cudaBaseImageDo) WriteDB() ICudaBaseImageDo {
	return c.Clauses(dbresolver.Write)
}

func (c cudaBaseImageDo) Session(config *gorm.Session) ICudaBaseImageDo {
	return c.withDO(c.DO.Session(config))
}

func (c cudaBaseImageDo) Clauses(conds ...clause.Expression) ICudaBaseImageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cudaBaseImageDo) Returning(value interface{}, columns ...string) ICudaBaseImageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cudaBaseImageDo) Not(conds ...gen.Condition) ICudaBaseImageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cudaBaseImageDo) Or(conds ...gen.Condition) ICudaBaseImageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cudaBaseImageDo) Select(conds ...field.Expr) ICudaBaseImageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cudaBaseImageDo) Where(conds ...gen.Condition) ICudaBaseImageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cudaBaseImageDo) Order(conds ...field.Expr) ICudaBaseImageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cudaBaseImageDo) Distinct(cols ...field.Expr) ICudaBaseImageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cudaBaseImageDo) Omit(cols ...field.Expr) ICudaBaseImageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cudaBaseImageDo) Join(table schema.Tabler, on ...field.Expr) ICudaBaseImageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cudaBaseImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICudaBaseImageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cudaBaseImageDo) RightJoin(table schema.Tabler, on ...field.Expr) ICudaBaseImageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cudaBaseImageDo) Group(cols ...field.Expr) ICudaBaseImageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cudaBaseImageDo) Having(conds ...gen.Condition) ICudaBaseImageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cudaBaseImageDo) Limit(limit int) ICudaBaseImageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cudaBaseImageDo) Offset(offset int) ICudaBaseImageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cudaBaseImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICudaBaseImageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cudaBaseImageDo) Unscoped() ICudaBaseImageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cudaBaseImageDo) Create(values ...*model.CudaBaseImage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cudaBaseImageDo) CreateInBatches(values []*model.CudaBaseImage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cudaBaseImageDo) Save(values ...*model.CudaBaseImage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cudaBaseImageDo) First() (*model.CudaBaseImage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CudaBaseImage), nil
	}
}

func (c cudaBaseImageDo) Take() (*model.CudaBaseImage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CudaBaseImage), nil
	}
}

func (c cudaBaseImageDo) Last() (*model.CudaBaseImage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CudaBaseImage), nil
	}
}

func (c cudaBaseImageDo) Find() ([]*model.CudaBaseImage, error) {
	result, err := c.DO.Find()
	return result.([]*model.CudaBaseImage), err
}

func (c cudaBaseImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CudaBaseImage, err error) {
	buf := make([]*model.CudaBaseImage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cudaBaseImageDo) FindInBatches(result *[]*model.CudaBaseImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cudaBaseImageDo) Attrs(attrs ...field.AssignExpr) ICudaBaseImageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cudaBaseImageDo) Assign(attrs ...field.AssignExpr) ICudaBaseImageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cudaBaseImageDo) Joins(fields ...field.RelationField) ICudaBaseImageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cudaBaseImageDo) Preload(fields ...field.RelationField) ICudaBaseImageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cudaBaseImageDo) FirstOrInit() (*model.CudaBaseImage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CudaBaseImage), nil
	}
}

func (c cudaBaseImageDo) FirstOrCreate() (*model.CudaBaseImage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CudaBaseImage), nil
	}
}

func (c cudaBaseImageDo) FindByPage(offset int, limit int) (result []*model.CudaBaseImage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cudaBaseImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cudaBaseImageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cudaBaseImageDo) Delete(models ...*model.CudaBaseImage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cudaBaseImageDo) withDO(do gen.Dao) *cudaBaseImageDo {
	c.DO = *do.(*gen.DO)
	return c
}
