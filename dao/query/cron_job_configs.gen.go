// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newCronJobConfig(db *gorm.DB, opts ...gen.DOOption) cronJobConfig {
	_cronJobConfig := cronJobConfig{}

	_cronJobConfig.cronJobConfigDo.UseDB(db, opts...)
	_cronJobConfig.cronJobConfigDo.UseModel(&model.CronJobConfig{})

	tableName := _cronJobConfig.cronJobConfigDo.TableName()
	_cronJobConfig.ALL = field.NewAsterisk(tableName)
	_cronJobConfig.ID = field.NewUint(tableName, "id")
	_cronJobConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_cronJobConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cronJobConfig.DeletedAt = field.NewField(tableName, "deleted_at")
	_cronJobConfig.Name = field.NewString(tableName, "name")
	_cronJobConfig.Type = field.NewString(tableName, "type")
	_cronJobConfig.Spec = field.NewString(tableName, "spec")
	_cronJobConfig.Suspend = field.NewBool(tableName, "suspend")
	_cronJobConfig.Config = field.NewField(tableName, "config")
	_cronJobConfig.EntryID = field.NewInt(tableName, "entry_id")

	_cronJobConfig.fillFieldMap()

	return _cronJobConfig
}

type cronJobConfig struct {
	cronJobConfigDo cronJobConfigDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String // Cronjob配置名称
	Type      field.String // Cronjob类型
	Spec      field.String // Cron调度规范
	Suspend   field.Bool   // 是否暂停执行
	Config    field.Field  // Cronjob配置数据
	EntryID   field.Int    // Cronjob标识ID

	fieldMap map[string]field.Expr
}

func (c cronJobConfig) Table(newTableName string) *cronJobConfig {
	c.cronJobConfigDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cronJobConfig) As(alias string) *cronJobConfig {
	c.cronJobConfigDo.DO = *(c.cronJobConfigDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cronJobConfig) updateTableName(table string) *cronJobConfig {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Name = field.NewString(table, "name")
	c.Type = field.NewString(table, "type")
	c.Spec = field.NewString(table, "spec")
	c.Suspend = field.NewBool(table, "suspend")
	c.Config = field.NewField(table, "config")
	c.EntryID = field.NewInt(table, "entry_id")

	c.fillFieldMap()

	return c
}

func (c *cronJobConfig) WithContext(ctx context.Context) ICronJobConfigDo {
	return c.cronJobConfigDo.WithContext(ctx)
}

func (c cronJobConfig) TableName() string { return c.cronJobConfigDo.TableName() }

func (c cronJobConfig) Alias() string { return c.cronJobConfigDo.Alias() }

func (c cronJobConfig) Columns(cols ...field.Expr) gen.Columns {
	return c.cronJobConfigDo.Columns(cols...)
}

func (c *cronJobConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cronJobConfig) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["type"] = c.Type
	c.fieldMap["spec"] = c.Spec
	c.fieldMap["suspend"] = c.Suspend
	c.fieldMap["config"] = c.Config
	c.fieldMap["entry_id"] = c.EntryID
}

func (c cronJobConfig) clone(db *gorm.DB) cronJobConfig {
	c.cronJobConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cronJobConfig) replaceDB(db *gorm.DB) cronJobConfig {
	c.cronJobConfigDo.ReplaceDB(db)
	return c
}

type cronJobConfigDo struct{ gen.DO }

type ICronJobConfigDo interface {
	gen.SubQuery
	Debug() ICronJobConfigDo
	WithContext(ctx context.Context) ICronJobConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICronJobConfigDo
	WriteDB() ICronJobConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICronJobConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICronJobConfigDo
	Not(conds ...gen.Condition) ICronJobConfigDo
	Or(conds ...gen.Condition) ICronJobConfigDo
	Select(conds ...field.Expr) ICronJobConfigDo
	Where(conds ...gen.Condition) ICronJobConfigDo
	Order(conds ...field.Expr) ICronJobConfigDo
	Distinct(cols ...field.Expr) ICronJobConfigDo
	Omit(cols ...field.Expr) ICronJobConfigDo
	Join(table schema.Tabler, on ...field.Expr) ICronJobConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICronJobConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICronJobConfigDo
	Group(cols ...field.Expr) ICronJobConfigDo
	Having(conds ...gen.Condition) ICronJobConfigDo
	Limit(limit int) ICronJobConfigDo
	Offset(offset int) ICronJobConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICronJobConfigDo
	Unscoped() ICronJobConfigDo
	Create(values ...*model.CronJobConfig) error
	CreateInBatches(values []*model.CronJobConfig, batchSize int) error
	Save(values ...*model.CronJobConfig) error
	First() (*model.CronJobConfig, error)
	Take() (*model.CronJobConfig, error)
	Last() (*model.CronJobConfig, error)
	Find() ([]*model.CronJobConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CronJobConfig, err error)
	FindInBatches(result *[]*model.CronJobConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CronJobConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICronJobConfigDo
	Assign(attrs ...field.AssignExpr) ICronJobConfigDo
	Joins(fields ...field.RelationField) ICronJobConfigDo
	Preload(fields ...field.RelationField) ICronJobConfigDo
	FirstOrInit() (*model.CronJobConfig, error)
	FirstOrCreate() (*model.CronJobConfig, error)
	FindByPage(offset int, limit int) (result []*model.CronJobConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICronJobConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cronJobConfigDo) Debug() ICronJobConfigDo {
	return c.withDO(c.DO.Debug())
}

func (c cronJobConfigDo) WithContext(ctx context.Context) ICronJobConfigDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cronJobConfigDo) ReadDB() ICronJobConfigDo {
	return c.Clauses(dbresolver.Read)
}

func (c cronJobConfigDo) WriteDB() ICronJobConfigDo {
	return c.Clauses(dbresolver.Write)
}

func (c cronJobConfigDo) Session(config *gorm.Session) ICronJobConfigDo {
	return c.withDO(c.DO.Session(config))
}

func (c cronJobConfigDo) Clauses(conds ...clause.Expression) ICronJobConfigDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cronJobConfigDo) Returning(value interface{}, columns ...string) ICronJobConfigDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cronJobConfigDo) Not(conds ...gen.Condition) ICronJobConfigDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cronJobConfigDo) Or(conds ...gen.Condition) ICronJobConfigDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cronJobConfigDo) Select(conds ...field.Expr) ICronJobConfigDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cronJobConfigDo) Where(conds ...gen.Condition) ICronJobConfigDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cronJobConfigDo) Order(conds ...field.Expr) ICronJobConfigDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cronJobConfigDo) Distinct(cols ...field.Expr) ICronJobConfigDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cronJobConfigDo) Omit(cols ...field.Expr) ICronJobConfigDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cronJobConfigDo) Join(table schema.Tabler, on ...field.Expr) ICronJobConfigDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cronJobConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICronJobConfigDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cronJobConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ICronJobConfigDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cronJobConfigDo) Group(cols ...field.Expr) ICronJobConfigDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cronJobConfigDo) Having(conds ...gen.Condition) ICronJobConfigDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cronJobConfigDo) Limit(limit int) ICronJobConfigDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cronJobConfigDo) Offset(offset int) ICronJobConfigDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cronJobConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICronJobConfigDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cronJobConfigDo) Unscoped() ICronJobConfigDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cronJobConfigDo) Create(values ...*model.CronJobConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cronJobConfigDo) CreateInBatches(values []*model.CronJobConfig, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cronJobConfigDo) Save(values ...*model.CronJobConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cronJobConfigDo) First() (*model.CronJobConfig, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobConfig), nil
	}
}

func (c cronJobConfigDo) Take() (*model.CronJobConfig, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobConfig), nil
	}
}

func (c cronJobConfigDo) Last() (*model.CronJobConfig, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobConfig), nil
	}
}

func (c cronJobConfigDo) Find() ([]*model.CronJobConfig, error) {
	result, err := c.DO.Find()
	return result.([]*model.CronJobConfig), err
}

func (c cronJobConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CronJobConfig, err error) {
	buf := make([]*model.CronJobConfig, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cronJobConfigDo) FindInBatches(result *[]*model.CronJobConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cronJobConfigDo) Attrs(attrs ...field.AssignExpr) ICronJobConfigDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cronJobConfigDo) Assign(attrs ...field.AssignExpr) ICronJobConfigDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cronJobConfigDo) Joins(fields ...field.RelationField) ICronJobConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cronJobConfigDo) Preload(fields ...field.RelationField) ICronJobConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cronJobConfigDo) FirstOrInit() (*model.CronJobConfig, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobConfig), nil
	}
}

func (c cronJobConfigDo) FirstOrCreate() (*model.CronJobConfig, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CronJobConfig), nil
	}
}

func (c cronJobConfigDo) FindByPage(offset int, limit int) (result []*model.CronJobConfig, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cronJobConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cronJobConfigDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cronJobConfigDo) Delete(models ...*model.CronJobConfig) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cronJobConfigDo) withDO(do gen.Dao) *cronJobConfigDo {
	c.DO = *do.(*gen.DO)
	return c
}
